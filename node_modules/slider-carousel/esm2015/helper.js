import { Injectable, ComponentFactoryResolver, ApplicationRef, Injector, EmbeddedViewRef, ComponentRef } from '@angular/core';
import { Observable } from 'rxjs';
import { SliderCarouselPreviewComponent } from './slider-carousel-preview/slider-carousel-preview.component';
export class Helper {
    constructor(componentFactoryResolver, appRef, injector) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
    }
    openPreview(data = {}) {
        let onCloseSubscribe;
        let object;
        object = {
            onClose: new Observable((subscribe) => onCloseSubscribe = subscribe),
            instance: null
        };
        let componenRef = this.createComponent(SliderCarouselPreviewComponent, data, (data) => {
            onCloseSubscribe.next(data);
        });
        object.instance = componenRef.instance;
        return object;
    }
    createComponent(component, data, onClose) {
        const componentRef = this.componentFactoryResolver
            .resolveComponentFactory(component)
            .create(this.injector);
        if (!data)
            data = {};
        data.close = (data) => {
            this.appRef.detachView(componentRef.hostView);
            componentRef.destroy();
            if (onClose)
                onClose(data);
        };
        Object.assign(componentRef.instance, { modalRef: data });
        this.appRef.attachView(componentRef.hostView);
        const domElem = componentRef.hostView.rootNodes[0];
        document.body.appendChild(domElem);
        return componentRef;
    }
    smoothScroll(element, scroll, duration = 400, direction = 'top') {
        let start = direction === 'top' ? element.scrollTop : element.scrollLeft;
        if (scroll < 0)
            scroll = 0;
        let distance = (scroll - start) - 77;
        let startTime = new Date().getTime();
        if (!duration)
            duration = 400;
        let easeInOutQuart = (time, from, distance, duration) => {
            if ((time /= duration / 2) < 1)
                return distance / 2 * time * time * time * time + from;
            return -distance / 2 * ((time -= 2) * time * time * time - 2) + from;
        };
        let timer = setInterval(() => {
            const time = new Date().getTime() - startTime, newScroll = easeInOutQuart(time, start, distance, duration);
            if (time >= duration) {
                clearInterval(timer);
                timer = null;
            }
            if (element.scrollTo) {
                if (direction === 'top')
                    element.scrollTo(element.scrollLeft, newScroll);
                else
                    element.scrollTo(newScroll, element.scrollTop);
            }
            else {
                if (direction === 'top')
                    element.scrollTop = newScroll;
                else
                    element.scrollLeft = newScroll;
            }
        }, 1000 / 60);
        return timer;
    }
    elementIsChild(element, parentElment) {
        try {
            while (element && element.tagName.toUpperCase() !== 'BODY') {
                if (element === parentElment) {
                    return true;
                }
                element = element.parentNode;
            }
            return false;
        }
        catch (_a) {
            return false;
        }
    }
    isMobileDevice() {
        return (typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1);
    }
}
Helper.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
Helper.decorators = [
    { type: Injectable }
];
Helper.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: Injector }
];
//# sourceMappingURL=data:application/json;base64,