import { Component, OnInit, ElementRef, HostBinding } from '@angular/core';
export class SliderCarouselPreviewComponent {
    constructor(elRef) {
        this.elRef = elRef;
        this.class = true;
        this.closedClass = false;
        this.imageUrl = '';
        this.loading = true;
        this.scaleRate = 1;
        this.modalRef = {};
    }
    get width() { return (this.loading ? 0 : this.img.width * this.scaleRate) + 'px'; }
    get height() { return (this.loading ? 0 : this.img.height * this.scaleRate) + 'px'; }
    get windowWidth() { return window.innerWidth - 40; }
    get windowHeight() { return window.innerHeight - 40; }
    ngOnInit() {
        this.imageUrl = this.modalRef.image.safeUrl;
        this.loadImage(this.modalRef.image.pureUrl);
    }
    loadImage(imageUrl) {
        this.loading = true;
        this.img = new Image();
        this.img.onload = () => {
            this.loading = false;
            this.onWindowResize();
        };
        this.img.src = imageUrl;
    }
    onImageChange(image, fileName) {
        if (!this.loading && this.imageUrl !== image.safeUrl) {
            this.imageUrl = image.safeUrl;
            this.loadImage(image.pureUrl);
        }
    }
    onKeydown(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (event.keyCode === 27)
            this.close();
    }
    onWindowResize() {
        if (!this.loading) {
            let widthDiff = this.windowWidth - this.img.width;
            let heightDiff = this.windowHeight - this.img.height;
            if (widthDiff < 0 || heightDiff < 0) {
                if (widthDiff < heightDiff) {
                    if (this.img.width > this.windowWidth) {
                        this.scaleRate = this.windowWidth / this.img.width;
                        return;
                    }
                }
                else {
                    if (this.img.height > this.windowHeight) {
                        this.scaleRate = this.windowHeight / this.img.height;
                        return;
                    }
                }
            }
        }
        this.scaleRate = 1;
    }
    close() {
        this.closedClass = true;
        setTimeout(() => this.modalRef.close(), 500);
    }
}
SliderCarouselPreviewComponent.ctorParameters = () => [
    { type: ElementRef }
];
SliderCarouselPreviewComponent.decorators = [
    { type: Component, args: [{
                selector: 'slider-carousel-preview',
                template: "<section>\n    <img [src]=\"imageUrl\" [style.width]=\"width\" [style.height]=\"height\" [style.opacity]=\"loading ? 0 : 1\" />\n    <div *ngIf=\"!loading\" class=\"slider-carousel-preview-actions\">\n        <button matRipple matTooltipPosition=\"above\" (click)=\"close()\">\n            <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 51.976 51.976\">\n                <path d=\"M44.373,7.603c-10.137-10.137-26.632-10.138-36.77,0c-10.138,10.138-10.137,26.632,0,36.77s26.632,10.138,36.77,0\n                    C54.51,34.235,54.51,17.74,44.373,7.603z M36.241,36.241c-0.781,0.781-2.047,0.781-2.828,0l-7.425-7.425l-7.778,7.778\n                    c-0.781,0.781-2.047,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l7.778-7.778l-7.425-7.425c-0.781-0.781-0.781-2.048,0-2.828\n                    c0.781-0.781,2.047-0.781,2.828,0l7.425,7.425l7.071-7.071c0.781-0.781,2.047-0.781,2.828,0c0.781,0.781,0.781,2.047,0,2.828\n                    l-7.071,7.071l7.425,7.425C37.022,34.194,37.022,35.46,36.241,36.241z\"/>\n            </svg>\n        </button>\n    </div>\n</section>\n<div *ngIf=\"loading\" class=\"slider-carousel-loading\"></div>",
                host: {
                    '(document:keydown)': 'onKeydown($event)',
                    '(window:resize)': 'onWindowResize()'
                }
            },] }
];
SliderCarouselPreviewComponent.ctorParameters = () => [
    { type: ElementRef }
];
SliderCarouselPreviewComponent.propDecorators = {
    class: [{ type: HostBinding, args: ['class.slider-carousel-preview',] }],
    closedClass: [{ type: HostBinding, args: ['class.closed',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWNhcm91c2VsLXByZXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2xpZGVyLWNhcm91c2VsLyIsInNvdXJjZXMiOlsic2xpZGVyLWNhcm91c2VsLXByZXZpZXcvc2xpZGVyLWNhcm91c2VsLXByZXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFXM0UsTUFBTSxPQUFPLDhCQUE4QjtJQW1CMUMsWUFDUSxLQUE4QjtRQUE5QixVQUFLLEdBQUwsS0FBSyxDQUF5QjtRQW5CZSxVQUFLLEdBQVksSUFBSSxDQUFDO1FBQ3ZDLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBRTFELGFBQVEsR0FBdUIsRUFBRSxDQUFDO1FBRWxDLFlBQU8sR0FBWSxJQUFJLENBQUM7UUFHdkIsY0FBUyxHQUFXLENBQUMsQ0FBQztRQUV0QixhQUFRLEdBQTJCLEVBQUUsQ0FBQztJQVc5QyxDQUFDO0lBVEQsSUFBVyxLQUFLLEtBQWEsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEcsSUFBVyxNQUFNLEtBQWEsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFcEcsSUFBWSxXQUFXLEtBQWEsT0FBTyxNQUFNLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDcEUsSUFBWSxZQUFZLEtBQWEs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QkFBa0I7aUJBQ3JDO2FBQ0Q7OztZQVYyQixVQUFVOzs7b0JBWXBDLFdBQVcsU0FBQywrQkFBK0I7MEJBQzNDLFdBQVcsU0FBQyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTYWZlVmFsdWUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnc2xpZGVyLWNhcm91c2VsLXByZXZpZXcnLFxuXHR0ZW1wbGF0ZVVybDogJy4vc2xpZGVyLWNhcm91c2VsLXByZXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuXHRob3N0OiB7XG5cdFx0Jyhkb2N1bWVudDprZXlkb3duKSc6ICdvbktleWRvd24oJGV2ZW50KScsXG5cdFx0Jyh3aW5kb3c6cmVzaXplKSc6ICdvbldpbmRvd1Jlc2l6ZSgpJ1xuXHR9XG59KVxuZXhwb3J0IGNsYXNzIFNsaWRlckNhcm91c2VsUHJldmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdEBIb3N0QmluZGluZygnY2xhc3Muc2xpZGVyLWNhcm91c2VsLXByZXZpZXcnKSBwdWJsaWMgY2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoJ2NsYXNzLmNsb3NlZCcpIHB1YmxpYyBjbG9zZWRDbGFzczogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdHB1YmxpYyBpbWFnZVVybDogU2FmZVZhbHVlIHwgc3RyaW5nID0gJyc7XG5cblx0cHVibGljIGxvYWRpbmc6IGJvb2xlYW4gPSB0cnVlO1xuXG5cdHByaXZhdGUgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xuXHRwcml2YXRlIHNjYWxlUmF0ZTogbnVtYmVyID0gMTtcblxuXHRwcml2YXRlIG1vZGFsUmVmOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG5cblx0cHVibGljIGdldCB3aWR0aCgpOiBzdHJpbmcgeyByZXR1cm4gKHRoaXMubG9hZGluZyA/IDAgOiB0aGlzLmltZy53aWR0aCAqIHRoaXMuc2NhbGVSYXRlKSArICdweCc7IH1cblx0cHVibGljIGdldCBoZWlnaHQoKTogc3RyaW5nIHsgcmV0dXJuICh0aGlzLmxvYWRpbmcgPyAwIDogdGhpcy5pbWcuaGVpZ2h0ICogdGhpcy5zY2FsZVJhdGUpICsgJ3B4JzsgfVxuXG5cdHByaXZhdGUgZ2V0IHdpbmRvd1dpZHRoKCk6IG51bWJlciB7IHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCAtIDQwOyB9XG5cdHByaXZhdGUgZ2V0IHdpbmRvd0hlaWdodCgpOiBudW1iZXIgeyByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IC0gNDA7IH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwdWJsaWMgZWxSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+XG5cdCkge1xuXHR9XG5cblx0bmdPbkluaXQoKSB7XG5cdFx0dGhpcy5pbWFnZVVybCA9IHRoaXMubW9kYWxSZWYuaW1hZ2Uuc2FmZVVybDtcblx0XHR0aGlzLmxvYWRJbWFnZSh0aGlzLm1vZGFsUmVmLmltYWdlLnB1cmVVcmwpO1xuXHR9XG5cblx0cHJpdmF0ZSBsb2FkSW1hZ2UoaW1hZ2VVcmw6IHN0cmluZykge1xuXHRcdHRoaXMubG9hZGluZyA9IHRydWU7XG5cdFx0dGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcblx0XHR0aGlzLmltZy5vbmxvYWQgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblx0XHRcdHRoaXMub25XaW5kb3dSZXNpemUoKTtcblx0XHR9O1xuXHRcdHRoaXMuaW1nLnNyYyA9IGltYWdlVXJsO1xuXHR9XG5cblx0cHVibGljIG9uSW1hZ2VDaGFuZ2UoaW1hZ2U6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGZpbGVOYW1lPzogc3RyaW5nKSB7XG5cdFx0aWYgKCF0aGlzLmxvYWRpbmcgJiYgdGhpcy5pbWFnZVVybCAhPT0gaW1hZ2Uuc2FmZVVybCkge1xuXHRcdFx0dGhpcy5pbWFnZVVybCA9IGltYWdlLnNhZmVVcmw7XG5cdFx0XHR0aGlzLmxvYWRJbWFnZShpbWFnZS5wdXJlVXJsKTtcblx0XHR9XG5cdH1cblxuXHRvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG5cdFx0aWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KVxuXHRcdFx0dGhpcy5jbG9zZSgpO1xuXHR9XG5cblx0b25XaW5kb3dSZXNpemUoKSB7XG5cdFx0aWYgKCF0aGlzLmxvYWRpbmcpIHtcblx0XHRcdGxldCB3aWR0aERpZmYgPSB0aGlzLndpbmRvd1dpZHRoIC0gdGhpcy5pbWcud2lkdGg7XG5cdFx0XHRsZXQgaGVpZ2h0RGlmZiA9IHRoaXMud2luZG93SGVpZ2h0IC0gdGhpcy5pbWcuaGVpZ2h0O1xuXG5cdFx0XHRpZiAod2lkdGhEaWZmIDwgMCB8fCBoZWlnaHREaWZmIDwgMCkge1xuXHRcdFx0XHRpZiAod2lkdGhEaWZmIDwgaGVpZ2h0RGlmZikge1xuXHRcdFx0XHRcdGlmICh0aGlzLmltZy53aWR0aCA+IHRoaXMud2luZG93V2lkdGgpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2NhbGVSYXRlID0gdGhpcy53aW5kb3dXaWR0aCAvIHRoaXMuaW1nLndpZHRoO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRpZiAodGhpcy5pbWcuaGVpZ2h0ID4gdGhpcy53aW5kb3dIZWlnaHQpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2NhbGVSYXRlID0gdGhpcy53aW5kb3dIZWlnaHQgLyB0aGlzLmltZy5oZWlnaHQ7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuc2NhbGVSYXRlID0gMTtcblx0fVxuXG5cdGNsb3NlKCkge1xuXHRcdHRoaXMuY2xvc2VkQ2xhc3MgPSB0cnVlO1xuXHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy5tb2RhbFJlZi5jbG9zZSgpLCA1MDApO1xuXHR9XG59XG4iXX0=