import { Component, OnInit, ElementRef, HostBinding } from '@angular/core';
var SliderCarouselPreviewComponent = /** @class */ (function () {
    function SliderCarouselPreviewComponent(elRef) {
        this.elRef = elRef;
        this.class = true;
        this.closedClass = false;
        this.imageUrl = '';
        this.loading = true;
        this.scaleRate = 1;
        this.modalRef = {};
    }
    Object.defineProperty(SliderCarouselPreviewComponent.prototype, "width", {
        get: function () { return (this.loading ? 0 : this.img.width * this.scaleRate) + 'px'; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SliderCarouselPreviewComponent.prototype, "height", {
        get: function () { return (this.loading ? 0 : this.img.height * this.scaleRate) + 'px'; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SliderCarouselPreviewComponent.prototype, "windowWidth", {
        get: function () { return window.innerWidth - 40; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SliderCarouselPreviewComponent.prototype, "windowHeight", {
        get: function () { return window.innerHeight - 40; },
        enumerable: false,
        configurable: true
    });
    SliderCarouselPreviewComponent.prototype.ngOnInit = function () {
        this.imageUrl = this.modalRef.image.safeUrl;
        this.loadImage(this.modalRef.image.pureUrl);
    };
    SliderCarouselPreviewComponent.prototype.loadImage = function (imageUrl) {
        var _this = this;
        this.loading = true;
        this.img = new Image();
        this.img.onload = function () {
            _this.loading = false;
            _this.onWindowResize();
        };
        this.img.src = imageUrl;
    };
    SliderCarouselPreviewComponent.prototype.onImageChange = function (image, fileName) {
        if (!this.loading && this.imageUrl !== image.safeUrl) {
            this.imageUrl = image.safeUrl;
            this.loadImage(image.pureUrl);
        }
    };
    SliderCarouselPreviewComponent.prototype.onKeydown = function (event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (event.keyCode === 27)
            this.close();
    };
    SliderCarouselPreviewComponent.prototype.onWindowResize = function () {
        if (!this.loading) {
            var widthDiff = this.windowWidth - this.img.width;
            var heightDiff = this.windowHeight - this.img.height;
            if (widthDiff < 0 || heightDiff < 0) {
                if (widthDiff < heightDiff) {
                    if (this.img.width > this.windowWidth) {
                        this.scaleRate = this.windowWidth / this.img.width;
                        return;
                    }
                }
                else {
                    if (this.img.height > this.windowHeight) {
                        this.scaleRate = this.windowHeight / this.img.height;
                        return;
                    }
                }
            }
        }
        this.scaleRate = 1;
    };
    SliderCarouselPreviewComponent.prototype.close = function () {
        var _this = this;
        this.closedClass = true;
        setTimeout(function () { return _this.modalRef.close(); }, 500);
    };
    SliderCarouselPreviewComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SliderCarouselPreviewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'slider-carousel-preview',
                    template: "<section>\n    <img [src]=\"imageUrl\" [style.width]=\"width\" [style.height]=\"height\" [style.opacity]=\"loading ? 0 : 1\" />\n    <div *ngIf=\"!loading\" class=\"slider-carousel-preview-actions\">\n        <button matRipple matTooltipPosition=\"above\" (click)=\"close()\">\n            <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 51.976 51.976\">\n                <path d=\"M44.373,7.603c-10.137-10.137-26.632-10.138-36.77,0c-10.138,10.138-10.137,26.632,0,36.77s26.632,10.138,36.77,0\n                    C54.51,34.235,54.51,17.74,44.373,7.603z M36.241,36.241c-0.781,0.781-2.047,0.781-2.828,0l-7.425-7.425l-7.778,7.778\n                    c-0.781,0.781-2.047,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l7.778-7.778l-7.425-7.425c-0.781-0.781-0.781-2.048,0-2.828\n                    c0.781-0.781,2.047-0.781,2.828,0l7.425,7.425l7.071-7.071c0.781-0.781,2.047-0.781,2.828,0c0.781,0.781,0.781,2.047,0,2.828\n                    l-7.071,7.071l7.425,7.425C37.022,34.194,37.022,35.46,36.241,36.241z\"/>\n            </svg>\n        </button>\n    </div>\n</section>\n<div *ngIf=\"loading\" class=\"slider-carousel-loading\"></div>",
                    host: {
                        '(document:keydown)': 'onKeydown($event)',
                        '(window:resize)': 'onWindowResize()'
                    }
                },] }
    ];
    SliderCarouselPreviewComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    SliderCarouselPreviewComponent.propDecorators = {
        class: [{ type: HostBinding, args: ['class.slider-carousel-preview',] }],
        closedClass: [{ type: HostBinding, args: ['class.closed',] }]
    };
    return SliderCarouselPreviewComponent;
}());
export { SliderCarouselPreviewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWNhcm91c2VsLXByZXZpZXcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vc2xpZGVyLWNhcm91c2VsLyIsInNvdXJjZXMiOlsic2xpZGVyLWNhcm91c2VsLXByZXZpZXcvc2xpZGVyLWNhcm91c2VsLXByZXZpZXcuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0U7SUEyQkMsd0NBQ1EsS0FBOEI7UUFBOUIsVUFBSyxHQUFMLEtBQUssQ0FBeUI7UUFuQmUsVUFBSyxHQUFZLElBQUksQ0FBQztRQUN2QyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUUxRCxhQUFRLEdBQXVCLEVBQUUsQ0FBQztRQUVsQyxZQUFPLEdBQVksSUFBSSxDQUFDO1FBR3ZCLGNBQVMsR0FBVyxDQUFDLENBQUM7UUFFdEIsYUFBUSxHQUEyQixFQUFFLENBQUM7SUFXOUMsQ0FBQztJQVRELHNCQUFXLGlEQUFLO2FBQWhCLGNBQTZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUNsRyxzQkFBVyxrREFBTTthQUFqQixjQUE4QixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFFcEcsc0JBQVksdURBQVc7YUFBdkIsY0FBb0MsT0FBTyxNQUFNLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENB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UyxTQUFDO29CQUNWLFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLGtuQ0FBdUQ7b0JBQ3ZELElBQUksRUFBRTt3QkFDTCxvQkFBb0IsRUFBRSxtQkFBbUI7d0JBQ3pDLGlCQUFpQixFQUFFLGtCQUFrQjtxQkFDckM7aUJBQ0Q7OztnQkFWMkIsVUFBVTs7O3dCQVlwQyxXQUFXLFNBQUMsK0JBQStCOzhCQUMzQyxXQUFXLFNBQUMsY0FBYzs7SUErRTVCLHFDQUFDO0NBQUEsQUF6RkQsSUF5RkM7U0FqRlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEVsZW1lbnRSZWYsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTYWZlVmFsdWUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnc2xpZGVyLWNhcm91c2VsLXByZXZpZXcnLFxuXHR0ZW1wbGF0ZVVybDogJy4vc2xpZGVyLWNhcm91c2VsLXByZXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuXHRob3N0OiB7XG5cdFx0Jyhkb2N1bWVudDprZXlkb3duKSc6ICdvbktleWRvd24oJGV2ZW50KScsXG5cdFx0Jyh3aW5kb3c6cmVzaXplKSc6ICdvbldpbmRvd1Jlc2l6ZSgpJ1xuXHR9XG59KVxuZXhwb3J0IGNsYXNzIFNsaWRlckNhcm91c2VsUHJldmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cdEBIb3N0QmluZGluZygnY2xhc3Muc2xpZGVyLWNhcm91c2VsLXByZXZpZXcnKSBwdWJsaWMgY2xhc3M6IGJvb2xlYW4gPSB0cnVlO1xuXHRASG9zdEJpbmRpbmcoJ2NsYXNzLmNsb3NlZCcpIHB1YmxpYyBjbG9zZWRDbGFzczogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdHB1YmxpYyBpbWFnZVVybDogU2FmZVZhbHVlIHwgc3RyaW5nID0gJyc7XG5cblx0cHVibGljIGxvYWRpbmc6IGJvb2xlYW4gPSB0cnVlO1xuXG5cdHByaXZhdGUgaW1nOiBIVE1MSW1hZ2VFbGVtZW50O1xuXHRwcml2YXRlIHNjYWxlUmF0ZTogbnVtYmVyID0gMTtcblxuXHRwcml2YXRlIG1vZGFsUmVmOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG5cblx0cHVibGljIGdldCB3aWR0aCgpOiBzdHJpbmcgeyByZXR1cm4gKHRoaXMubG9hZGluZyA/IDAgOiB0aGlzLmltZy53aWR0aCAqIHRoaXMuc2NhbGVSYXRlKSArICdweCc7IH1cblx0cHVibGljIGdldCBoZWlnaHQoKTogc3RyaW5nIHsgcmV0dXJuICh0aGlzLmxvYWRpbmcgPyAwIDogdGhpcy5pbWcuaGVpZ2h0ICogdGhpcy5zY2FsZVJhdGUpICsgJ3B4JzsgfVxuXG5cdHByaXZhdGUgZ2V0IHdpbmRvd1dpZHRoKCk6IG51bWJlciB7IHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aCAtIDQwOyB9XG5cdHByaXZhdGUgZ2V0IHdpbmRvd0hlaWdodCgpOiBudW1iZXIgeyByZXR1cm4gd2luZG93LmlubmVySGVpZ2h0IC0gNDA7IH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwdWJsaWMgZWxSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+XG5cdCkge1xuXHR9XG5cblx0bmdPbkluaXQoKSB7XG5cdFx0dGhpcy5pbWFnZVVybCA9IHRoaXMubW9kYWxSZWYuaW1hZ2Uuc2FmZVVybDtcblx0XHR0aGlzLmxvYWRJbWFnZSh0aGlzLm1vZGFsUmVmLmltYWdlLnB1cmVVcmwpO1xuXHR9XG5cblx0cHJpdmF0ZSBsb2FkSW1hZ2UoaW1hZ2VVcmw6IHN0cmluZykge1xuXHRcdHRoaXMubG9hZGluZyA9IHRydWU7XG5cdFx0dGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcblx0XHR0aGlzLmltZy5vbmxvYWQgPSAoKSA9PiB7XG5cdFx0XHR0aGlzLmxvYWRpbmcgPSBmYWxzZTtcblx0XHRcdHRoaXMub25XaW5kb3dSZXNpemUoKTtcblx0XHR9O1xuXHRcdHRoaXMuaW1nLnNyYyA9IGltYWdlVXJsO1xuXHR9XG5cblx0cHVibGljIG9uSW1hZ2VDaGFuZ2UoaW1hZ2U6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGZpbGVOYW1lPzogc3RyaW5nKSB7XG5cdFx0aWYgKCF0aGlzLmxvYWRpbmcgJiYgdGhpcy5pbWFnZVVybCAhPT0gaW1hZ2Uuc2FmZVVybCkge1xuXHRcdFx0dGhpcy5pbWFnZVVybCA9IGltYWdlLnNhZmVVcmw7XG5cdFx0XHR0aGlzLmxvYWRJbWFnZShpbWFnZS5wdXJlVXJsKTtcblx0XHR9XG5cdH1cblxuXHRvbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXG5cdFx0aWYgKGV2ZW50LmtleUNvZGUgPT09IDI3KVxuXHRcdFx0dGhpcy5jbG9zZSgpO1xuXHR9XG5cblx0b25XaW5kb3dSZXNpemUoKSB7XG5cdFx0aWYgKCF0aGlzLmxvYWRpbmcpIHtcblx0XHRcdGxldCB3aWR0aERpZmYgPSB0aGlzLndpbmRvd1dpZHRoIC0gdGhpcy5pbWcud2lkdGg7XG5cdFx0XHRsZXQgaGVpZ2h0RGlmZiA9IHRoaXMud2luZG93SGVpZ2h0IC0gdGhpcy5pbWcuaGVpZ2h0O1xuXG5cdFx0XHRpZiAod2lkdGhEaWZmIDwgMCB8fCBoZWlnaHREaWZmIDwgMCkge1xuXHRcdFx0XHRpZiAod2lkdGhEaWZmIDwgaGVpZ2h0RGlmZikge1xuXHRcdFx0XHRcdGlmICh0aGlzLmltZy53aWR0aCA+IHRoaXMud2luZG93V2lkdGgpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2NhbGVSYXRlID0gdGhpcy53aW5kb3dXaWR0aCAvIHRoaXMuaW1nLndpZHRoO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRpZiAodGhpcy5pbWcuaGVpZ2h0ID4gdGhpcy53aW5kb3dIZWlnaHQpIHtcblx0XHRcdFx0XHRcdHRoaXMuc2NhbGVSYXRlID0gdGhpcy53aW5kb3dIZWlnaHQgLyB0aGlzLmltZy5oZWlnaHQ7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuc2NhbGVSYXRlID0gMTtcblx0fVxuXG5cdGNsb3NlKCkge1xuXHRcdHRoaXMuY2xvc2VkQ2xhc3MgPSB0cnVlO1xuXHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy5tb2RhbFJlZi5jbG9zZSgpLCA1MDApO1xuXHR9XG59XG4iXX0=