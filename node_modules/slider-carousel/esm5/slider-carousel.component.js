import { Component, OnInit, HostBinding, Input, ElementRef, ViewChild, OnDestroy, OnChanges, Renderer2, AfterViewChecked } from '@angular/core';
import { DomSanitizer, SafeUrl, SafeStyle } from '@angular/platform-browser';
import { Helper } from './helper';
var SliderCarouselComponent = /** @class */ (function () {
    function SliderCarouselComponent(sanitizer, renderer, helper) {
        this.sanitizer = sanitizer;
        this.renderer = renderer;
        this.helper = helper;
        this.class = true;
        this.images = [];
        this.preview = true;
        this.height = '500px';
        this.width = '100%';
        this.maxWidth = '100%';
        this.autoSize = false;
        this.safeImages = [];
        this.initialized = false;
        this.currentImageIndex = 0;
        this.lastDirectionIsRight = false;
        this.containerWidth = 0;
        this.destroyed = false;
        this.windowResizing = false;
        this.listeners = [];
        this.drag = {
            state: 'none',
            startOffset: 0,
            currentOffset: 0,
            startLeft: 0,
            currentLeft: 0,
        };
    }
    Object.defineProperty(SliderCarouselComponent.prototype, "currentImage", {
        get: function () { return this.safeImages[this.currentImageIndex]; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SliderCarouselComponent.prototype, "currentIsFisrt", {
        get: function () { return this.currentImageIndex === 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SliderCarouselComponent.prototype, "currentIsLast", {
        get: function () { return this.currentImageIndex === (this.images.length - 1); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SliderCarouselComponent.prototype, "isDragging", {
        get: function () { return this.drag.state !== 'none'; },
        enumerable: false,
        configurable: true
    });
    SliderCarouselComponent.prototype.ngOnInit = function () {
    };
    SliderCarouselComponent.prototype.ngOnChanges = function () {
        this.prepare();
    };
    SliderCarouselComponent.prototype.prepare = function () {
        if (typeof this.height !== 'string')
            this.height = '500px';
        else if (!this.height.endsWith('%') && !this.height.endsWith('px'))
            this.height += 'px';
        if (typeof this.width !== 'string')
            this.width = '100%';
        else if (!this.width.endsWith('%') && !this.width.endsWith('px'))
            this.width += 'px';
        if (typeof this.maxWidth !== 'string')
            this.maxWidth = '100%';
        else if (!this.maxWidth.endsWith('%') && !this.maxWidth.endsWith('px'))
            this.maxWidth += 'px';
        this.initialized = true;
        this.checkImages();
        this.initSlideDragWatching();
        this.ngAfterViewChecked();
    };
    SliderCarouselComponent.prototype.ngAfterViewChecked = function () {
        if (!this.windowResizing) {
            var width = 0;
            if (this.sectionEl && this.sectionEl.nativeElement)
                width = this.sectionEl.nativeElement.clientWidth;
            if (width !== this.containerWidth)
                this.containerWidth = width;
        }
    };
    SliderCarouselComponent.prototype.checkImages = function () {
        var _this = this;
        if (this.images && this.images.length) {
            if (typeof this.images[0] !== 'string') {
                this.images.forEach(function (image) {
                    if (!image.md)
                        image.md = image.lg;
                    if (!image.sm)
                        image.sm = image.md;
                });
            }
            else {
                this.images = this.images.map(function (image) {
                    return { lg: image, md: image, sm: image };
                });
            }
            this.safeImages = this.images.map(function (image) {
                var _a, _b, _c, _d, _e, _f;
                var sizes = {
                    lg: {
                        url: ((_a = image.lg) === null || _a === void 0 ? void 0 : _a.startsWith('http')) ? _this.sanitizer.bypassSecurityTrustUrl(image.lg) : image.lg,
                        style: ((_b = image.lg) === null || _b === void 0 ? void 0 : _b.startsWith('http')) ? _this.sanitizer.bypassSecurityTrustStyle("url('" + image.lg + "')") : "url('" + image.lg + "')",
                        pure: image.lg
                    },
                    md: {
                        url: ((_c = image.md) === null || _c === void 0 ? void 0 : _c.startsWith('http')) ? _this.sanitizer.bypassSecurityTrustUrl(image.md) : image.md,
                        style: ((_d = image.md) === null || _d === void 0 ? void 0 : _d.startsWith('http')) ? _this.sanitizer.bypassSecurityTrustStyle("url('" + image.md + "')") : "url('" + image.md + "')",
                        pure: image.md
                    },
                    sm: {
                        url: ((_e = image.sm) === null || _e === void 0 ? void 0 : _e.startsWith('http')) ? _this.sanitizer.bypassSecurityTrustUrl(image.sm) : image.sm,
                        style: ((_f = image.sm) === null || _f === void 0 ? void 0 : _f.startsWith('http')) ? _this.sanitizer.bypassSecurityTrustStyle("url('" + image.sm + "')") : "url('" + image.sm + "')",
                        pure: image.sm
                    }
                };
                return sizes;
            });
        }
        else {
            this.safeImages = [];
        }
    };
    SliderCarouselComponent.prototype.initSlideDragWatching = function () {
        var _this = this;
        if (this.innerImagesEl && this.innerImagesEl.nativeElement) {
            this.stopSlideDragWatching();
            if (this.helper.isMobileDevice())
                this.listeners = [
                    this.renderer.listen(document.body, 'touchstart', this.onStartDrag.bind(this)),
                    this.renderer.listen(document.body, 'touchmove', this.onDragging.bind(this)),
                    this.renderer.listen(document.body, 'touchend', this.onEndDrag.bind(this))
                ];
            else
                this.listeners = [
                    this.renderer.listen(document.body, 'mousedown', this.onStartDrag.bind(this)),
                    this.renderer.listen(document.body, 'mousemove', this.onDragging.bind(this)),
                    this.renderer.listen(document.body, 'mouseup', this.onEndDrag.bind(this)),
                ];
        }
        else
            setTimeout(function () { return _this.initSlideDragWatching(); }, 200);
    };
    SliderCarouselComponent.prototype.stopSlideDragWatching = function () {
        if (this.listeners && this.listeners.length)
            this.listeners.forEach(function (unListen) { return unListen(); });
    };
    SliderCarouselComponent.prototype.previewImage = function (image) {
        var _this = this;
        if (!this.previewRef) {
            this.previewRef = this.helper.openPreview({
                image: {
                    pureUrl: image.lg.pure,
                    safeUrl: image.lg.url,
                }
            });
            this.previewRef.onClose.subscribe(function () { return _this.previewRef = null; });
        }
    };
    SliderCarouselComponent.prototype.selectImage = function (imageIndex, event) {
        if (imageIndex !== this.currentImageIndex) {
            this.lastDirectionIsRight = imageIndex > this.currentImageIndex;
            this.currentImageIndex = imageIndex;
            if (event.target && this.imageListEl && this.imageListEl.nativeElement)
                this.scrollingToElement(event.target, this.lastDirectionIsRight);
        }
    };
    SliderCarouselComponent.prototype.goPrevImage = function (salt) {
        if (salt === void 0) { salt = 0; }
        if (this.currentImageIndex > 0) {
            if (salt) {
                if ((this.currentImageIndex - salt) >= 0)
                    this.currentImageIndex -= salt + 1;
                else
                    this.currentImageIndex = 0;
            }
            else
                this.currentImageIndex--;
            this.lastDirectionIsRight = false;
            var target = this.imageListEl.nativeElement.children[0].children[this.currentImageIndex];
            if (this.imageListEl && this.imageListEl.nativeElement)
                this.scrollingToElement(target, this.lastDirectionIsRight);
        }
    };
    SliderCarouselComponent.prototype.goNextImage = function (salt) {
        if (salt === void 0) { salt = 0; }
        if ((this.currentImageIndex + 1) < this.images.length) {
            if (salt) {
                if ((this.currentImageIndex + salt + 1) <= (this.images.length - 1))
                    this.currentImageIndex = salt + 1;
                else
                    this.currentImageIndex = this.images.length;
            }
            else
                this.currentImageIndex++;
            this.lastDirectionIsRight = true;
            var target = this.imageListEl.nativeElement.children[0].children[this.currentImageIndex];
            if (this.imageListEl && this.imageListEl.nativeElement)
                this.scrollingToElement(target, this.lastDirectionIsRight);
        }
    };
    SliderCarouselComponent.prototype.scrollingToElement = function (element, directionIsRight) {
        var scrollElement = this.imageListEl.nativeElement;
        if (scrollElement && scrollElement.scrollWidth > 0) {
            var blockWidth = element.clientWidth + 14;
            var scrollLeft = element.offsetLeft - 14;
            var scrollRight = element.offsetLeft + element.clientWidth + 14;
            var currentScrollLeft = scrollElement.scrollLeft;
            var currentScrollRight = scrollElement.scrollLeft + scrollElement.clientWidth;
            var scroll_1 = .1;
            if (directionIsRight && (currentScrollRight - scrollRight) < Math.floor(blockWidth / 2))
                scroll_1 = currentScrollLeft + blockWidth + 100;
            else if (!directionIsRight && (scrollLeft - currentScrollLeft) < Math.floor(blockWidth / 2))
                scroll_1 = currentScrollLeft - blockWidth;
            if (scroll_1 !== .1) {
                if (this.timerSroll)
                    clearInterval(this.timerSroll);
                this.timerSroll = this.helper.smoothScroll(scrollElement, scroll_1, 400, 'left');
            }
        }
    };
    SliderCarouselComponent.prototype.onKeydown = function (event) {
        if (!this.destroyed && !this.isDragging && [37, 39].indexOf(event.keyCode) >= 0) {
            if (event.keyCode === 37)
                this.goPrevImage();
            else
                this.goNextImage();
            if (this.previewRef)
                this.previewRef.instance.onImageChange({
                    pureUrl: this.currentImage.lg.pure,
                    safeUrl: this.currentImage.lg.url,
                });
        }
    };
    SliderCarouselComponent.prototype.onWindowResize = function () {
        var _this = this;
        if (!this.destroyed && !this.windowResizing) {
            this.windowResizing = true;
            setTimeout(function () {
                _this.containerWidth = _this.sectionEl.nativeElement.clientWidth;
                setTimeout(function () {
                    _this.windowResizing = false;
                    setTimeout(function () {
                        if (_this.imageListEl && _this.imageListEl.nativeElement) {
                            var target = _this.imageListEl.nativeElement.children[0].children[_this.currentImageIndex];
                            if (_this.imageListEl && _this.imageListEl.nativeElement)
                                _this.scrollingToElement(target, _this.lastDirectionIsRight);
                        }
                    }, 100);
                });
            });
        }
    };
    SliderCarouselComponent.prototype.onStartDrag = function (event) {
        var isTouching = false;
        if (event.touches) {
            isTouching = true;
            event = event.touches[0];
        }
        if (isTouching || event.button === 0) {
            if (this.helper.elementIsChild(event.target, this.sectionEl.nativeElement)) {
                this.drag.startLeft = this.innerImagesEl.nativeElement.offsetLeft;
                this.drag.currentLeft = this.innerImagesEl.nativeElement.offsetLeft;
                this.drag.startOffset = event.clientX;
                this.drag.currentOffset = event.clientX;
                this.drag.state = 'start';
            }
        }
    };
    SliderCarouselComponent.prototype.onDragging = function (event) {
        if (event.touches)
            event = event.touches[0];
        if (this.drag.state === 'start' || this.drag.state === 'dragging') {
            this.drag.state = 'dragging';
            this.drag.currentOffset = event.clientX;
            if (this.drag.startOffset !== this.drag.currentOffset) {
                var draggingRight = this.drag.currentOffset > this.drag.startOffset;
                var delta = Math.abs(this.drag.currentOffset - this.drag.startOffset) * .8;
                if (((draggingRight && this.currentIsFisrt) || (!draggingRight && this.currentIsLast)) && delta > Math.floor(this.containerWidth / 3))
                    delta = Math.floor(this.containerWidth / 3);
                this.drag.currentLeft = this.drag.startLeft + ((draggingRight ? 1 : -1) * delta);
            }
            else
                this.drag.currentLeft = this.drag.startLeft;
        }
    };
    SliderCarouselComponent.prototype.onEndDrag = function (event) {
        var _this = this;
        var isTouching = false;
        if (event.touches) {
            isTouching = true;
            event = event.touches[0];
        }
        if (isTouching || event.button === 0) {
            var amountDragged_1 = Math.abs(this.drag.startOffset - this.drag.currentOffset);
            if (this.drag.state === 'dragging' && amountDragged_1 > 0)
                setTimeout(function () {
                    _this.drag.state = 'none';
                    var minDreg = 70;
                    if (amountDragged_1 >= minDreg) {
                        var draggingRight = _this.drag.currentOffset > _this.drag.startOffset;
                        var salts = (amountDragged_1 / _this.sectionEl.nativeElement.clientWidth) - 1;
                        if (salts >= 1)
                            salts = Math.floor(salts);
                        else
                            salts = 0;
                        if (draggingRight && !_this.currentIsFisrt)
                            _this.goPrevImage(salts);
                        else if (!draggingRight && !_this.currentIsLast)
                            _this.goNextImage(salts);
                    }
                });
            else {
                this.drag.state = 'none';
            }
        }
    };
    SliderCarouselComponent.prototype.ngOnDestroy = function () {
        this.destroyed = true;
        this.stopSlideDragWatching();
    };
    SliderCarouselComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: Renderer2 },
        { type: Helper }
    ]; };
    SliderCarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'slider-carousel',
                    template: "<section #section *ngIf=\"safeImages && safeImages.length\" [style.width]=\"width\" [style.maxWidth]=\"maxWidth\">\n    <div *ngIf=\"!windowResizing && containerWidth > 0\" class=\"image-controller animated fadeIn\" [style.maxWidth.px]=\"containerWidth\">\n\n        <!-- INNER CONTAINER -->\n        <ul #innerImages *ngIf=\"!autoSize\"\n            [ngClass]=\"{'dragging-effect': isDragging}\"\n\t\t\t[style.left.px]=\"isDragging ? drag.currentLeft : (-currentImageIndex * containerWidth)\"\n\t\t\t[style.width.px]=\"safeImages.length * containerWidth\"\n            [style.height]=\"height\">\n            <li *ngFor=\"let image of safeImages; let i = index;\"\n                [style.backgroundImage]=\"image.md.style\"\n                [style.width.px]=\"containerWidth\"\n                [ngClass]=\"{'cursor-pointer': preview, 'is-current': i === currentImageIndex}\"\n                (click)=\"!isDragging && previewImage(image)\">\n            </li>\n        </ul>\n        <ul #innerImages *ngIf=\"autoSize\" [ngClass]=\"{'dragging-effect': isDragging}\" [style.left.px]=\"isDragging ? drag.currentLeft : (-currentImageIndex * containerWidth)\">\n            <div *ngFor=\"let image of safeImages; let i = index;\" [style.width.px]=\"containerWidth\">\n\t\t\t\t<img [src]=\"image.md.url\" draggable=\"false\" [ngClass]=\"{'cursor-pointer': preview, 'is-current': i === currentImageIndex}\" (click)=\"!isDragging && previewImage(image)\"/>\n            </div>\n        </ul>\n\n        <!-- NAVIGATION BUTTONS -->\n        <div (click)=\"goPrevImage()\" class=\"image-controller-prev\" [ngClass]=\"{'disabled': currentImageIndex <= 0}\" role=\"button\">\n            <svg viewBox=\"0 0 456 456\">\n                <path d=\"M227.996,0C102.081,0,0,102.081,0,227.996c0,125.945,102.081,227.996,227.996,227.996\n\t\t\t\tc125.945,0,227.996-102.051,227.996-227.996C455.992,102.081,353.941,0,227.996,0z M299.435,238.788l-98.585,98.585\n\t\t\t\tc-5.928,5.897-15.565,5.897-21.492,0c-5.928-5.928-5.928-15.595,0-21.492l87.885-87.885l-87.885-87.885\n\t\t\t\tc-5.928-5.928-5.928-15.565,0-21.492s15.565-5.928,21.492,0l98.585,98.585c3.04,2.979,4.469,6.901,4.438,10.792\n\t\t\t\tC303.873,231.918,302.414,235.809,299.435,238.788z\"/>\n            </svg>                    \n        </div>\n        <div (click)=\"goNextImage()\" class=\"image-controller-next\" [ngClass]=\"{'disabled': (currentImageIndex + 1) >= safeImages.length}\" role=\"button\">\n            <svg viewBox=\"0 0 456 456\">\n                <path d=\"M227.996,0C102.081,0,0,102.081,0,227.996c0,125.945,102.081,227.996,227.996,227.996\n\t\t\t\tc125.945,0,227.996-102.051,227.996-227.996C455.992,102.081,353.941,0,227.996,0z M299.435,238.788l-98.585,98.585\n\t\t\t\tc-5.928,5.897-15.565,5.897-21.492,0c-5.928-5.928-5.928-15.595,0-21.492l87.885-87.885l-87.885-87.885\n\t\t\t\tc-5.928-5.928-5.928-15.565,0-21.492s15.565-5.928,21.492,0l98.585,98.585c3.04,2.979,4.469,6.901,4.438,10.792\n\t\t\t\tC303.873,231.918,302.414,235.809,299.435,238.788z\"/>\n            </svg>  \n        </div>\n\n    </div>\n\n    <!-- GALLERY NAVIGATION -->\n    <div *ngIf=\"!windowResizing && containerWidth > 0\" #imageList class=\"footer-images animated fadeIn\" [style.maxWidth.px]=\"containerWidth\">\n        <ul>\n            <li matRipple (click)=\"selectImage(i, $event)\" *ngFor=\"let image of safeImages; let i = index;\"\n                [ngClass]=\"{'is-current': i === currentImageIndex}\"\n                [style.backgroundImage]=\"image.sm.style\">\n            </li>\n        </ul>\n    </div>\n</section>",
                    host: {
                        '(document:keydown)': 'onKeydown($event)',
                        '(window:resize)': 'onWindowResize()'
                    }
                },] }
    ];
    SliderCarouselComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: Renderer2 },
        { type: Helper }
    ]; };
    SliderCarouselComponent.propDecorators = {
        class: [{ type: HostBinding, args: ['class.slider-carousel',] }],
        sectionEl: [{ type: ViewChild, args: ['section',] }],
        imageListEl: [{ type: ViewChild, args: ['imageList',] }],
        innerImagesEl: [{ type: ViewChild, args: ['innerImages',] }],
        images: [{ type: Input }],
        preview: [{ type: Input }],
        height: [{ type: Input }],
        width: [{ type: Input }],
        maxWidth: [{ type: Input, args: ['max-width',] }],
        autoSize: [{ type: Input, args: ['auto-size',] }]
    };
    return SliderCarouselComponent;
}());
export { SliderCarouselComponent };
//# sourceMappingURL=data:application/json;base64,